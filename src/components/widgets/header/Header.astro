---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/widgets/header/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface SocialLink {
  ariaLabel?: string;
  icon?: string;
  href?: string;
}

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
  socialLinks: Array<SocialLink>;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  position = 'isFullWidth',
  socialLinks = [],
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;

// header actions base position
const callToActionPrimaryPosition = actions.filter((action) => action.position === 'primary');
const callToActionSecondaryPosition = actions.filter((action) => action.position === 'secondary');

const isHomepage = Astro.url.pathname === '/' || Astro.url.pathname === '/en';
const currentLang = currentPath.startsWith('/en') ? 'en' : 'fa';
const toggleLang = getRelativeLocaleUrl(
  currentLang === 'fa' ? 'en' : 'fa',
  currentLang === 'en' ? currentPath.slice(3) : isHomepage ? undefined : currentPath
);
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-8 px-4 mx-auto max-w-[1320px]',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-2 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class="flex gap-5 md:gap-11">
      <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
        <a class="flex items-center" href={getHomePermalink()}>
          <Logo />
        </a>
        <div class="flex items-center md:hidden">
          <ToggleMenu />
        </div>
      </div>
      <nav
        class="items-center w-full hidden md:flex text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
        aria-label="Main navigation"
      >
        <ul
          class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-slate-500 text-base font-medium md:justify-center"
        >
          {
            links.map(({ text, href, links }) => (
              <li class={links?.length ? 'dropdown' : ''}>
                {links?.length ? (
                  <>
                    <button type="button" class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center">
                      {text}{' '}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                      />
                    </button>
                    <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                      {links.map(({ text: text2, href: href2 }) => (
                        <li>
                          <a
                            class:list={[
                              'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                              { 'aw-link-active': href2 === currentPath },
                            ]}
                            href={href2}
                          >
                            {text2}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <a
                    class:list={[
                      'hover:text-link dark:hover:text-white px-4 py-3 flex items-center',
                      { 'aw-link-active': href === currentPath },
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
    </div>

    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center flex flex-row-reverse justify-between gap-1 w-full md:w-auto">
        <!-- dark mode switch -->
        <div class="flex rounded-full">
          {
            showToggleTheme && (
              <ToggleTheme
                class="btn-secondary h-10 w-10 border border-gray-300 rounded-full"
                iconClass="text-gray-400 w-6 h-6 md:w-5 md:h-5 md:inline-block"
              />
            )
          }
        </div>

        <!-- lang button -->
        <div class="flex">
          {
            callToActionPrimaryPosition.length > 0 && (
              <span class="">
                {callToActionPrimaryPosition.map((btnProps) => (
                  <Button
                    {...btnProps}
                    href={toggleLang}
                    class="border-gray-300 text-gray-400 text-lg font-medium uppercase h-10 px-3 inline-flex justify-center items-center py-0 shadow-none w-auto"
                  />
                ))}
              </span>
            )
          }
        </div>

        <!-- social links -->
        <div
          class="flex items-center justify-center rounded-full border border-gray-300 dark:border-slate-500 h-10 px-1.5"
        >
          {
            socialLinks.map((link) => (
              <a
                href={link.href}
                class="w-9 h-9 inline-flex justify-center items-center text-gray-400 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-full text-base"
                aria-label={link.ariaLabel}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Icon name={link.icon} class="w-5 h-5" />
              </a>
            ))
          }
        </div>

        <!-- donata button -->
        <div class="flex ml-3 relative">
          <span class="animate-jello absolute -start-2.5 -top-2.5">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g id="Highlight-gr-01">
                <g id="Group">
                  <path
                    id="Vector"
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M1.4257 8.39731C1.92263 6.32976 1.89009 4.33872 1.94964 2.24157C1.96122 1.83201 1.64681 1.49151 1.24777 1.47917C0.848497 1.46683 0.515277 1.79005 0.503462 2.19961C0.447043 4.18821 0.492618 6.08056 0.0210095 8.04448C-0.0744695 8.4417 0.163028 8.84386 0.55073 8.94009C0.938191 9.03878 1.33047 8.79453 1.4257 8.39731Z"
                    fill="#9CA3AF"></path>
                  <path
                    id="Vector_2"
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M5.64761 12.4041C9.01879 9.25098 12.1952 5.19486 14.4153 1.09925C14.6089 0.741496 14.4828 0.289973 14.1337 0.0925941C13.7845 -0.104785 13.3438 0.0235223 13.1502 0.381271C11.0034 4.34118 7.9314 8.2641 4.67161 11.3111C4.37698 11.5875 4.35648 12.0562 4.6258 12.3572C4.89512 12.6582 5.35298 12.6804 5.64761 12.4041Z"
                    fill="#9CA3AF"></path>
                  <path
                    id="Vector_3"
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M6.50161 15.8484C9.5849 16.369 12.763 15.4808 15.5666 14.2249C15.9323 14.0596 16.0992 13.6229 15.9393 13.2504C15.7792 12.8754 15.3522 12.7051 14.9865 12.868C12.4331 14.0128 9.54536 14.8615 6.73717 14.3878C6.3432 14.3212 5.97069 14.595 5.90583 14.9972C5.84073 15.3993 6.10788 15.7818 6.50161 15.8484Z"
                    fill="#9CA3AF"></path>
                </g>
              </g>
            </svg>
          </span>
          {
            callToActionSecondaryPosition.length > 0 && (
              <span class="">
                {callToActionSecondaryPosition.map((btnProps) => (
                  <Button
                    {...btnProps}
                    class="border-gray-300 text-gray-400 text-lg font-medium h-10 px-3 inline-flex justify-center items-center py-0 shadow-none w-auto"
                  />
                ))}
              </span>
            )
          }
        </div>
      </div>
    </div>
  </div>
</header>
