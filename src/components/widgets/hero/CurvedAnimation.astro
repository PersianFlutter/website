---
/**
 * CurvedAnimation Component
 *
 * This component creates an interactive animation system that combines curved motion paths,
 * SVG icons, and portrait images to create a dynamic and engaging user interface.
 *
 * Key Features:
 * - Curved motion paths for smooth icon animations using GSAP
 * - Dynamic icon switching system with mobile development-themed SVG icons
 * - Portrait image management with crossfade transitions
 * - Responsive layout with coordinated animations
 * - Grouped animation sequences (top/bottom, left/right coordination)
 *
 * Technical Implementation:
 * - Uses GSAP (GreenSock Animation Platform) for motion paths and transitions
 * - Implements custom image preloading and transition management
 * - Handles both initial page load and Astro page transitions
 * - Manages multiple synchronized animation timelines
 *
 * Animation Structure:
 * - 4 curved paths (top-left, top-right, bottom-left, bottom-right)
 * - 17 portrait images with dynamic transitions
 * - 20 mobile development themed SVG icons
 * - Coordinated group transitions with alternating patterns
 *
 * Portrait Layout:
 * - 7 portrait positions (3 middle + 4 corner positions)
 * - Crossfade transitions with scale effects
 * - Grouped transitions for visual cohesion
 *
 * Element Requirements:
 * - Curve elements with .curve-path class
 * - Icon elements with position-specific classes (e.g., .top-left-icon)
 * - Portrait containers with specific IDs (e.g., portrait-top-left)
 */
import portraitImage1 from '~/assets/images/portraits/portrait-img-01.jpg';
import portraitImage2 from '~/assets/images/portraits/portrait-img-02.jpg';
import portraitImage3 from '~/assets/images/portraits/portrait-img-03.jpg';
import portraitImage4 from '~/assets/images/portraits/portrait-img-04.jpg';
import portraitImage5 from '~/assets/images/portraits/portrait-img-05.jpg';
import portraitImage6 from '~/assets/images/portraits/portrait-img-06.jpg';
import portraitImage7 from '~/assets/images/portraits/portrait-img-07.jpg';
import portraitImage8 from '~/assets/images/portraits/portrait-img-08.jpg';
import portraitImage9 from '~/assets/images/portraits/portrait-img-09.jpg';
import portraitImage10 from '~/assets/images/portraits/portrait-img-10.jpg';
import portraitImage11 from '~/assets/images/portraits/portrait-img-11.jpg';
import portraitImage12 from '~/assets/images/portraits/portrait-img-12.jpg';
import portraitImage13 from '~/assets/images/portraits/portrait-img-13.jpg';
import portraitImage14 from '~/assets/images/portraits/portrait-img-14.jpg';
import portraitImage15 from '~/assets/images/portraits/portrait-img-15.jpg';
import portraitImage16 from '~/assets/images/portraits/portrait-img-16.jpg';
import portraitImage17 from '~/assets/images/portraits/portrait-img-17.jpg';

const portraitPaths = {
  portrait1: portraitImage1.src,
  portrait2: portraitImage2.src,
  portrait3: portraitImage3.src,
  portrait4: portraitImage4.src,
  portrait5: portraitImage5.src,
  portrait6: portraitImage6.src,
  portrait7: portraitImage7.src,
  portrait8: portraitImage8.src,
  portrait9: portraitImage9.src,
  portrait10: portraitImage10.src,
  portrait11: portraitImage11.src,
  portrait12: portraitImage12.src,
  portrait13: portraitImage13.src,
  portrait14: portraitImage14.src,
  portrait15: portraitImage15.src,
  portrait16: portraitImage16.src,
  portrait17: portraitImage17.src,
};
---

<script define:vars={{ portraitPaths }}>
  // Register GSAP plugin
  if (typeof window !== 'undefined') {
    gsap.registerPlugin(MotionPathPlugin);
  }

  // Define portrait images mapping
  const portraitImagePaths = {
    0: portraitPaths.portrait1,
    1: portraitPaths.portrait2,
    2: portraitPaths.portrait3,
    3: portraitPaths.portrait4,
    4: portraitPaths.portrait5,
    5: portraitPaths.portrait6,
    6: portraitPaths.portrait7,
    7: portraitPaths.portrait8,
    8: portraitPaths.portrait9,
    9: portraitPaths.portrait10,
    10: portraitPaths.portrait11,
    11: portraitPaths.portrait12,
    12: portraitPaths.portrait13,
    13: portraitPaths.portrait14,
    14: portraitPaths.portrait15,
    15: portraitPaths.portrait16,
    16: portraitPaths.portrait17,
  };

  const imageMappings = {
    topLeft: {
      containerId: 'portrait-top-left',
      imageIndices: [0, 4, 8, 12, 16],
    },
    topRight: {
      containerId: 'portrait-top-right',
      imageIndices: [1, 5, 9, 13, 2],
    },
    middleLeft: {
      containerId: 'portrait-middle-left',
      imageIndices: [2, 6, 10, 14, 15],
    },
    middleCenter: {
      containerId: 'portrait-middle-center',
      imageIndices: [3, 7, 11, 15, 16],
    },
    middleRight: {
      containerId: 'portrait-middle-right',
      imageIndices: [4, 8, 12, 16, 0],
    },
    bottomLeft: {
      containerId: 'portrait-bottom-left',
      imageIndices: [5, 9, 13, 3, 0],
    },
    bottomRight: {
      containerId: 'portrait-bottom-right',
      imageIndices: [6, 10, 14, 1, 2],
    },
  };

  // Collection of mobile development icons
  const mobileDevIcons = [
    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z M7 8h10 M7 12h10"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M13 10V3L4 14h7v7l9-11h-7z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/>
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM12 12h.01M12 9h.01M12 15h.01"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2zm12 3v4m0 0l-3-3m3 3l3-3"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>
  </svg>`,

    `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
      d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"/>
  </svg>`,
  ];

  // Icon arrays - Separate array for each path
  const iconSets = {
    topLeft: [mobileDevIcons[0], mobileDevIcons[11], mobileDevIcons[1], mobileDevIcons[7], mobileDevIcons[19]],
    topRight: [mobileDevIcons[4], mobileDevIcons[8], mobileDevIcons[14], mobileDevIcons[15], mobileDevIcons[18]],
    bottomLeft: [mobileDevIcons[5], mobileDevIcons[6], mobileDevIcons[17], mobileDevIcons[12], mobileDevIcons[16]],
    bottomRight: [mobileDevIcons[3], mobileDevIcons[10], mobileDevIcons[2], mobileDevIcons[9], mobileDevIcons[13]],
  };

  class CurvedAnimation {
    constructor(iconElement, curvePath, iconType, options = {}) {
      this.iconElement = iconElement;
      this.curvePath = curvePath;
      this.animation = null;
      this.currentIconIndex = 0;
      this.currentImageIndex = 0;
      this.icons = iconSets[iconType];
      this.imageMapping = imageMappings[iconType];
      this.alternateFlag = 0;

      // Portrait image grouping
      this.portraitGroups = {
        even: ['topLeft', 'bottomRight'],
        odd: ['topRight', 'bottomLeft'],
      };

      // Middle Portrait images for alternating changes
      this.middleImages = ['middleLeft', 'middleCenter', 'middleRight'];

      // New variable to identify current group
      this.currentGroup = this.alternateFlag === 0 ? 'even' : 'odd';

      if (this.iconElement) {
        this.iconElement.style.opacity = '0';
      }

      setTimeout(() => {
        this.initAnimation(options.delay || 0);
      }, 0);
    }

    changeIcon(isStart = false) {
      this.currentIconIndex = (this.currentIconIndex + 1) % this.icons.length;
      this.iconElement.innerHTML = this.icons[this.currentIconIndex];

      // Change images based on current group
      this.changeImagesForGroup(isStart);

      // Change middle images
      this.changeMiddleImages(isStart ? 'start' : 'end');
    }

    changeImagesForGroup(isStart) {
      // Determine current group for change
      const groupToChange = isStart
        ? this.alternateFlag === 0
          ? 'even'
          : 'odd'
        : this.alternateFlag === 0
          ? 'odd'
          : 'even';

      // Change images of current group
      this.portraitGroups[groupToChange].forEach((position) => {
        const container = document.getElementById(imageMappings[position].containerId);
        if (!container) return;

        const img = container.querySelector('img');
        if (!img) return;

        // Get next image index
        this.currentImageIndex = (this.currentImageIndex + 1) % imageMappings[position].imageIndices.length;
        const newImageIndex = imageMappings[position].imageIndices[this.currentImageIndex];
        const nextImage = portraitImagePaths[newImageIndex];

        // Create a new image element
        const newImg = new Image();
        newImg.src = nextImage;
        newImg.className = img.className;
        newImg.style.position = 'absolute';
        newImg.style.top = '0';
        newImg.style.left = '0';
        newImg.style.width = '100%';
        newImg.style.height = '100%';
        newImg.style.opacity = '0.7';
        newImg.style.transition = 'opacity 0.8s ease-in-out';

        // Setup container for crossfade
        if (img.parentElement.style.position !== 'relative') {
          img.parentElement.style.position = 'relative';
        }

        // Create a timeline for smooth transition
        const tl = gsap.timeline({
          onComplete: () => {
            // Update original image and clean up
            img.src = nextImage;
            img.style.opacity = '1';
            if (newImg.parentElement) {
              newImg.remove();
            }
          },
        });

        // Add new image to container
        img.parentElement.appendChild(newImg);

        // Animate with GSAP timeline
        tl.to(newImg, {
          opacity: 1,
          duration: 1.2,
          ease: 'power2.inOut',
        })
          .to(
            img,
            {
              opacity: 0,
              duration: 1.2,
              ease: 'power2.inOut',
            },
            '<'
          )
          .fromTo(
            newImg,
            {
              scale: 1.02,
            },
            {
              scale: 1,
              duration: 1.2,
              ease: 'power2.out',
            },
            '<'
          );
      });

      // Toggle flag at the end of movement
      if (!isStart) {
        this.alternateFlag = 1 - this.alternateFlag;
      }
    }

    changeMiddleImages(position) {
      // Determine which images should change
      let imagesToChange = [];
      if (position === 'start') {
        // At start: even or odd images based on flag
        imagesToChange = this.middleImages.filter((_, index) =>
          this.alternateFlag === 0 ? index % 2 === 0 : index % 2 === 1
        );
      } else if (position === 'end') {
        // At end: remaining images
        imagesToChange = this.middleImages.filter((_, index) =>
          this.alternateFlag === 0 ? index % 2 === 1 : index % 2 === 0
        );
      }

      // Change selected images
      imagesToChange.forEach((position) => {
        const container = document.getElementById(imageMappings[position].containerId);
        if (!container) return;

        const img = container.querySelector('img');
        if (!img) return;

        const currentIndex = imageMappings[position].imageIndices[this.currentImageIndex];
        const nextImage = portraitImagePaths[currentIndex];

        // Create a new image element
        const newImg = new Image();
        newImg.src = nextImage;
        newImg.className = img.className;
        newImg.style.position = 'absolute';
        newImg.style.top = '0';
        newImg.style.left = '0';
        newImg.style.width = '100%';
        newImg.style.height = '100%';
        newImg.style.opacity = '0.7';
        newImg.style.transition = 'opacity 0.8s ease-in-out';

        // Setup container for crossfade
        if (img.parentElement.style.position !== 'relative') {
          img.parentElement.style.position = 'relative';
        }

        // Create a timeline for smooth transition
        const tl = gsap.timeline({
          onComplete: () => {
            // Update original image and clean up
            img.src = nextImage;
            img.style.opacity = '1';
            if (newImg.parentElement) {
              newImg.remove();
            }
          },
        });

        // Add new image to container
        img.parentElement.appendChild(newImg);

        // Animate with GSAP timeline
        tl.to(newImg, {
          opacity: 1,
          duration: 1.2,
          ease: 'power2.inOut',
        })
          .to(
            img,
            {
              opacity: 0,
              duration: 1.2,
              ease: 'power2.inOut',
            },
            '<'
          )
          .fromTo(
            newImg,
            {
              scale: 1.02,
            },
            {
              scale: 1,
              duration: 1.2,
              ease: 'power2.out',
            },
            '<'
          );
      });
    }

    initAnimation(delay) {
      if (!this.iconElement || !this.curvePath) return;

      gsap.to(this.iconElement, {
        opacity: 1,
        duration: 1.5,
        delay: delay,
      });

      this.animation = gsap.fromTo(
        this.iconElement,
        {
          motionPath: {
            path: this.curvePath,
            align: this.curvePath,
            autoRotate: false,
            alignOrigin: [0.5, 0.5],
            start: 10,
          },
        },
        {
          motionPath: {
            path: this.curvePath,
            align: this.curvePath,
            autoRotate: false,
            alignOrigin: [0.5, 0.5],
            start: 0,
            end: 1,
          },
          duration: 6,
          repeat: -1,
          yoyo: true,
          ease: 'power2.inOut',
          delay: delay + 0.5,
          onStart: () => {
            gsap.delayedCall(0.3, () => this.changeIcon(true));
          },
          onRepeat: () => {
            gsap.delayedCall(0.3, () => this.changeIcon(false));
          },
          onReverseComplete: () => {
            gsap.delayedCall(0.3, () => this.changeIcon(true));
          },
        }
      );
    }
  }

  function createAnimation() {
    const curves = [
      {
        icon: document.querySelector('.top-left-icon'),
        path: document.querySelector('.top-left-curve .curve-path'),
        type: 'topLeft',
      },
      {
        icon: document.querySelector('.top-right-icon'),
        path: document.querySelector('.top-right-curve .curve-path'),
        type: 'topRight',
      },
      {
        icon: document.querySelector('.bottom-left-icon'),
        path: document.querySelector('.bottom-left-curve .curve-path'),
        type: 'bottomLeft',
      },
      {
        icon: document.querySelector('.bottom-right-icon'),
        path: document.querySelector('.bottom-right-curve .curve-path'),
        type: 'bottomRight',
      },
    ];

    curves.forEach((curve, index) => {
      if (curve.icon && curve.path) {
        new CurvedAnimation(curve.icon, curve.path, curve.type, { delay: index * 0.3 });
      }
    });
  }

  // Execute on initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', createAnimation);
  } else {
    createAnimation();
  }

  // Execute on Astro page change
  document.addEventListener('astro:page-load', createAnimation);
</script>
